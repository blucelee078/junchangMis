/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * newToFormalUI.java
 *
 * Created on 2011-5-7, 17:57:18
 */
package junchangmis.student;

import publicmethod.*;
import junchangmis.*;
import junchangmis.codecSetting.codecMethod;
import javax.swing.*;
import java.util.Vector;
import java.util.StringTokenizer;
import java.awt.event.WindowListener;
import java.awt.event.WindowEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 *
 * @author developers
 */
public class newToFormalUI extends javax.swing.JFrame implements WindowListener {

    DefaultListModel newListModel = new DefaultListModel();
    DefaultListModel formalListModel = new DefaultListModel();
    Vector<newComer> newcomer = new Vector<newComer>();
    Vector<formalStu> formalstu = new Vector<formalStu>();
    String classCode;
    MainFrame parent;

    /** Creates new form newToFormalUI */
    public newToFormalUI(MainFrame parent) {
        /*   for (int i = 0; i < 50; i++) {
        newListModel.addElement(i);
        }*/
        this.parent = parent;
        initComponents();
        this.jListNew.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.jListFormal.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        this.jListNew.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (jListNew.getSelectedIndex() != -1) {
                    if (e.getClickCount() == 1) {
                        oneNewClick(jListNew.getSelectedValue());
                    }
                    if (e.getClickCount() == 2) {
                        twoNewClick(jListNew.getSelectedValue());
                    }
                }
            }
        });
        this.jListFormal.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (jListFormal.getSelectedIndex() != -1) {
                    if (e.getClickCount() == 1) {
                        oneFormalClick(jListFormal.getSelectedValue());
                    }
                    if (e.getClickCount() == 2) {
                        twoFormalClick(jListFormal.getSelectedValue());
                    }
                }
            }
        });

        this.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        this.addWindowListener(this);
        this.setLocationRelativeTo(null);
        this.setTitle("试听生转正");
    }

    void oneNewClick(Object value) {
        //  System.out.println("单击");
    }

    void twoNewClick(Object value) {
        System.out.println("试听生双击");
        //提取主键
        StringTokenizer st = new StringTokenizer(this.jListNew.getSelectedValue().toString());
        Vector<String> temp = new Vector<String>();
        while (st.hasMoreTokens()) {
            //System.out.println(st.nextToken());
            temp.add(st.nextToken());
        }
        String name = temp.get(0);
        String tel = temp.get(3);
        newComer newcomerTemp = newToFormalUIMethod.getSelectedNewComer(name, tel);
        if (newcomerTemp != null) {
            newComerInputUI fr = new newComerInputUI(this, newcomerTemp);
            this.setVisible(false);//隐藏自己
            fr.setVisible(true);//显示子窗口
        }
    }

    void oneFormalClick(Object value) {
        //  System.out.println("单击");
    }

    void twoFormalClick(Object value) {
        System.out.println("正式生双击");
    }

    public void windowActivated(WindowEvent arg0) { //设置为活动窗口时触发
        //System.out.println("windowActivated -->窗口被选中。");
    }

    public void windowClosed(WindowEvent arg0) { //窗口被关闭时触发
        //System.out.println("windowClosed -->窗口被关闭。");
        //parent.setVisible(true);
    }

    public void windowClosing(WindowEvent arg0) { //窗口关闭时触发,按下关闭按钮
        System.out.println("windowClosing -->窗口关闭。");
        parent.setVisible(true);
    }

    public void windowDeactivated(WindowEvent arg0) { //设置为非活动窗口时触发
        //System.out.println("windowDeactivated -->取消窗口选中。");
    }

    public void windowDeiconified(WindowEvent arg0) { //窗口从最小化还原时触发
        //System.out.println("windowDeiconified -->窗口从最小化恢复。");
    }

    public void windowIconified(WindowEvent arg0) { //窗口最小化时触发
        //System.out.println("windowIconified -->窗口最小化。");
    }

    public void windowOpened(WindowEvent arg0) { //窗口最小化时触发
        //System.out.println("windowv -->窗口被打开。");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelLeft = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListNew = new javax.swing.JList();
        jPanelMiddle = new javax.swing.JPanel();
        jButtonToFormal = new javax.swing.JButton();
        jButtonToNew = new javax.swing.JButton();
        jPanelRight = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListFormal = new javax.swing.JList();
        jPanelBottom = new javax.swing.JPanel();
        jLabelClassCode = new javax.swing.JLabel();
        jTextFieldClassCode = new javax.swing.JTextField();
        jLabelCodeShow = new javax.swing.JLabel();
        jLabelLeft = new javax.swing.JLabel();
        jLabelRight = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelLeft.setLayout(new java.awt.GridLayout());

        jListNew.setModel(this.newListModel);
        jScrollPane1.setViewportView(jListNew);

        jPanelLeft.add(jScrollPane1);

        jButtonToFormal.setText(">>");
        jButtonToFormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonToFormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToFormalActionPerformed(evt);
            }
        });

        jButtonToNew.setText("<<");
        jButtonToNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonToNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMiddleLayout = new javax.swing.GroupLayout(jPanelMiddle);
        jPanelMiddle.setLayout(jPanelMiddleLayout);
        jPanelMiddleLayout.setHorizontalGroup(
            jPanelMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMiddleLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanelMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButtonToFormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonToNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );
        jPanelMiddleLayout.setVerticalGroup(
            jPanelMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMiddleLayout.createSequentialGroup()
                .addContainerGap(154, Short.MAX_VALUE)
                .addComponent(jButtonToFormal)
                .addGap(38, 38, 38)
                .addComponent(jButtonToNew)
                .addGap(174, 174, 174))
        );

        jPanelMiddleLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonToFormal, jButtonToNew});

        jPanelRight.setLayout(new java.awt.GridLayout());

        jListFormal.setModel(this.formalListModel);
        jScrollPane2.setViewportView(jListFormal);

        jPanelRight.add(jScrollPane2);

        jLabelClassCode.setText("输入专业班级代码：");

        jTextFieldClassCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClassCodeActionPerformed(evt);
            }
        });

        jLabelCodeShow.setText("--");

        javax.swing.GroupLayout jPanelBottomLayout = new javax.swing.GroupLayout(jPanelBottom);
        jPanelBottom.setLayout(jPanelBottomLayout);
        jPanelBottomLayout.setHorizontalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabelClassCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldClassCode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelCodeShow, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(323, Short.MAX_VALUE))
        );
        jPanelBottomLayout.setVerticalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelClassCode)
                    .addComponent(jTextFieldClassCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCodeShow))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        jLabelLeft.setText("试听生");

        jLabelRight.setText("正式生");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER, false)
                            .addComponent(jLabelLeft)
                            .addComponent(jPanelLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER, false)
                            .addComponent(jLabelRight)
                            .addComponent(jPanelRight, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanelLeft, jPanelRight});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelRight, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(jPanelMiddle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelLeft, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelRight)
                    .addComponent(jLabelLeft))
                .addGap(22, 22, 22)
                .addComponent(jPanelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonToFormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonToFormalActionPerformed
        // TODO add your handling code here:
        if (this.jListNew.getSelectedIndex() != -1) {//将选中的试听生变为正式生
            formalStu student = new formalStu();
            //提取列表中选择的试听生的有用信息
            StringTokenizer st = new StringTokenizer(this.jListNew.getSelectedValue().toString());
            Vector<String> temp = new Vector<String>();
            while (st.hasMoreTokens()) {
                //System.out.println(st.nextToken());
                temp.add(st.nextToken());
            }
            student.name = temp.get(0);
            student.sex = temp.get(1);
            student.birthday = temp.get(2);
            student.tel = temp.get(3);
            student.school = temp.get(4);

            student.classCode = this.classCode;

            formalStuInputUI fr = new formalStuInputUI(this, true, student, this);
            fr.setVisible(true);

            //这个任务交给formalStuInputUI来做
            //this.formalListModel.addElement(fr.student.id + " " + this.jListNew.getSelectedValue());
            //this.newListModel.remove(this.jListNew.getSelectedIndex());
        }
    }//GEN-LAST:event_jButtonToFormalActionPerformed

    private void jButtonToNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonToNewActionPerformed
        // TODO add your handling code here:
        if (this.jListFormal.getSelectedIndex() != -1) {//将选中的正式生变为试听生
            newComer newcomerTemp = new newComer();
            //提取列表中选择的正式生的有用信息
            StringTokenizer st = new StringTokenizer(this.jListFormal.getSelectedValue().toString());
            Vector<String> temp = new Vector<String>();
            while (st.hasMoreTokens()) {
                //System.out.println(st.nextToken());
                temp.add(st.nextToken());
            }
            //由正式生转化为试听生
            newcomerTemp.classCode = temp.get(0).substring(0, 6);
            newcomerTemp.name = temp.get(1);
            newcomerTemp.sex = temp.get(2);
            newcomerTemp.birthday = temp.get(3);
            newcomerTemp.tel = temp.get(4);
            newcomerTemp.school = temp.get(5);
            //添加试听生
            newComerInputMethod.addNewComer(newcomerTemp);//这时会重写该生的报名时间为当前系统时间
            //删除正式生
            formalStuInputMethod.deleteFormalStu(temp.get(0));

            rightToLeft();
        }
    }//GEN-LAST:event_jButtonToNewActionPerformed

    void updateLeft() {
        //将试听生显示在左侧列表中
        this.newListModel.removeAllElements();
        newToFormalUIMethod.getNewComer(classCode, newcomer);
        for (int i = 0; i < newcomer.size(); i++) {
            this.newListModel.addElement(newcomer.get(i).name + " " +
                    newcomer.get(i).sex + " " +
                    newcomer.get(i).birthday + " " +
                    newcomer.get(i).tel + " " +
                    newcomer.get(i).school);
            // System.out.println(newcomer.get(i).name + " " + newcomer.get(i).tel + " " + newcomer.get(i).school);
            this.jListNew.updateUI();
        }
    }

    void updateRight() {
        //将正式生显示在右侧列表中
        this.formalListModel.removeAllElements();
        newToFormalUIMethod.getFormalStu(classCode, formalstu);
        for (int i = 0; i < formalstu.size(); i++) {
            this.formalListModel.addElement(formalstu.get(i).id + " " +
                    formalstu.get(i).name + " " +
                    formalstu.get(i).sex + " " +
                    formalstu.get(i).birthday + " " +
                    formalstu.get(i).tel + " " +
                    formalstu.get(i).school);
            this.jListFormal.updateUI();
        }
    }

    void leftToRight(String id) {//左边一项移到右边
        this.formalListModel.addElement(id + " " + this.jListNew.getSelectedValue());
        this.newListModel.remove(this.jListNew.getSelectedIndex());
    }

    void rightToLeft() {
        int start = this.jListFormal.getSelectedValue().toString().indexOf(" ");
        this.newListModel.addElement(this.jListFormal.getSelectedValue().toString().substring(start + 1));
        this.formalListModel.remove(this.jListFormal.getSelectedIndex());
    }
    private void jTextFieldClassCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClassCodeActionPerformed
        // TODO add your handling code here:
        classCode = this.jTextFieldClassCode.getText();
        if (classCode == null || classCode.length() != 6) {
            JOptionPane.showConfirmDialog(null, "专业班级的编码格式错误！", "提示", JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
            this.jLabelCodeShow.setText("");
            this.newListModel.removeAllElements();
            this.jTextFieldClassCode.setSelectionStart(0);
        } else {
            String codeTriple = codecMethod.getCodeTripleMeaning(this.jTextFieldClassCode.getText());//获得总编码的翻译结果
            if (codeTriple == null) {
                JOptionPane.showConfirmDialog(null, "不存在该专业班级编码！", "提示", JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
                this.newListModel.removeAllElements();
                this.jTextFieldClassCode.setSelectionStart(0);
                return;
            }
            this.jLabelCodeShow.setText("：" + codeTriple);
            //将试听生显示在左侧列表中
            updateLeft();
            //将正式生显示在右侧列表中
            updateRight();

        }
    }//GEN-LAST:event_jTextFieldClassCodeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*  java.awt.EventQueue.invokeLater(new Runnable() {

        public void run() {
        new newToFormalUI().setVisible(true);
        }
        });*/
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonToFormal;
    private javax.swing.JButton jButtonToNew;
    private javax.swing.JLabel jLabelClassCode;
    private javax.swing.JLabel jLabelCodeShow;
    private javax.swing.JLabel jLabelLeft;
    private javax.swing.JLabel jLabelRight;
    private javax.swing.JList jListFormal;
    private javax.swing.JList jListNew;
    private javax.swing.JPanel jPanelBottom;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelMiddle;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldClassCode;
    // End of variables declaration//GEN-END:variables
}
